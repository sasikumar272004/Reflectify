big blob

<motion.svg viewBox="0 0 800 800" className="absolute inset-0 w-full h-full">
  <filter id="neutrino-storm">
    <feTurbulence type="turbulence" baseFrequency="0.01" numOctaves="5" />
    <feDisplacementMap in="SourceGraphic" scale="50" />
  </filter>
  
  <motion.circle
    cx="400"
    cy="400"
    r="300"
    fill="url(#neutrino-gradient)"
    filter="url(#neutrino-storm)"
    initial={{ opacity: 0 }}
    animate={{
      opacity: [0.3, 0.8, 0.3],
      scale: [1, 1.1, 1]
    }}
    transition={{ duration: 10, repeat: Infinity, ease: "easeInOut" }}
  />
  
  <defs>
    <radialGradient id="neutrino-gradient">
      <stop offset="0%" stopColor="#9c27b0" />
      <stop offset="100%" stopColor="#00bcd4" />
    </radialGradient>
  </defs>
</motion.svg>
plasma-glow
<motion.svg viewBox="0 0 500 200" className="absolute top-1/4 left-0 w-full">
  <filter id="plasma-glow">
    <feGaussianBlur stdDeviation="2" />
    <feComposite in="SourceGraphic" operator="over" />
  </filter>
  {[...Array(3)].map((_, i) => (
    <motion.path
      key={i}
      d={`
        M0,100 
        C${100},${50 + i*30} ${200},${150 - i*30} 300,100 
        S${400},${50 + i*20} 500,100
      `}
      stroke={`hsl(${180 + i*40}, 100%, 70%)`}
      strokeWidth={1 + i*0.5}
      fill="none"
      filter="url(#plasma-glow)"
      initial={{ pathLength: 0 }}
      animate={{
        pathLength: 1,
        strokeDashoffset: [0, -200],
        d: [
          `M0,100 C${100},${50 + i*30} ${200},${150 - i*30} 300,100 S${400},${50 + i*20} 500,100`,
          `M0,100 C${100},${70 + i*10} ${200},${130 - i*10} 300,100 S${400},${70 + i*40} 500,100`
        ]
      }}
      transition={{
        duration: 5 + i,
        repeat: Infinity,
        ease: "linear"
      }}
    />
  ))}
</motion.svg>

cool path
<motion.svg viewBox="0 0 500 200" className="absolute top-0 left-0 w-full h-full">
  <motion.path
    d="M0,100 Q50,20 100,150 T200,50 T300,180 T400,30 T500,120"
    stroke="url(#lightningGradient)"
    strokeWidth={1.5}
    fill="none"
    strokeDasharray="10 5"
    initial={{ pathLength: 0 }}
    animate={{
      pathLength: 1,
      strokeDashoffset: [0, -200],
      d: [
        "M0,100 Q50,20 100,150 T200,50 T300,180 T400,30 T500,120",
        "M0,100 Q50,180 100,50 T200,170 T300,20 T400,160 T500,80"
      ]
    }}
    transition={{
      duration: 3,
      repeat: Infinity,
      repeatType: "reverse",
      ease: "easeInOut"
    }}
  />
  <defs>
    <linearGradient id="lightningGradient">
      <stop offset="0%" stopColor="#00f7ff" />
      <stop offset="100%" stopColor="#ff00e6" />
    </linearGradient>
  </defs>
</motion.svg>

waves
<motion.svg viewBox="0 0 500 100" className="absolute top-1/3 left-0 w-full">
  {[...Array(3)].map((_, i) => (
    <motion.path
      key={i}
      d={`M0,50 Q${100+i*50},${10+i*30} ${250+i*50},50 T500,50`}
      stroke={`hsl(${180 + i*60}, 100%, 60%)`}
      strokeWidth={0.8}
      fill="none"
      strokeDasharray="20 10"
      initial={{ strokeDashoffset: 100 }}
      animate={{ strokeDashoffset: 0 }}
      transition={{ duration: 10+i*2, repeat: Infinity, ease: "linear" }}
    />
  ))}
</motion.svg>

circle super
<svg viewBox="0 0 500 500" className="w-full">
  {[...Array(20)].map((_, i) => (
    <motion.circle
      key={i}
      cx="250"
      cy="250"
      r={20 + i * 10}
      stroke={`hsl(${i * 18}, 100%, 50%)`}
      strokeWidth={1}
      fill="none"
      strokeDasharray="10 5"
      initial={{ rotate: 0 }}
      animate={{
        rotate: 360,
        strokeDashoffset: [0, 100],
        opacity: [0.2, 1, 0.2]
      }}
      transition={{
        duration: 15,
        delay: i * 0.2,
        repeat: Infinity,
        ease: "linear"
      }}
    />
  ))}
</svg>


flower pot
<svg viewBox="0 0 500 500" className="w-full">
  {[...Array(50)].map((_, i) => {
    const angle = Math.random() * Math.PI * 2;
    const length = 100 + Math.random() * 100;
    return (
      <motion.path
        key={i}
        d={`M250,250 L${250 + Math.cos(angle) * length},${250 + Math.sin(angle) * length}`}
        stroke={`hsla(${Math.random() * 360}, 100%, 50%, 0.7)`}
        strokeWidth={1 + Math.random() * 2}
        initial={{ pathLength: 0 }}
        animate={{
          pathLength: 1,
          stroke: [
            `hsla(${Math.random() * 360}, 100%, 50%, 0.7)`,
            `hsla(${Math.random() * 360}, 100%, 50%, 0.7)`
          ]
        }}
        transition={{
          duration: 2 + Math.random() * 3,
          delay: Math.random() * 2,
          repeat: Infinity,
          repeatType: "reverse"
        }}
      />
    );
  })}
</svg>

<motion.svg viewBox="0 0 800 800" className="absolute inset-0 w-full h-full">
  <filter id="quantum-fractal">
    <feTurbulence type="fractalNoise" baseFrequency="0.02" numOctaves="6" />
    <feDisplacementMap in="SourceGraphic" scale="40" />
  </filter>
  
  <defs>
    <radialGradient id="fractal-grad" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
      <stop offset="0%" stopColor="#7F00FF" />
      <stop offset="50%" stopColor="#E100FF" />
      <stop offset="100%" stopColor="#FF007F" />
    </radialGradient>
  </defs>
  

   <motion.path
    fill="url(#fractal-grad)"
    filter="url(#quantum-fractal)"
    initial={{ d: "M400,150 C500,100 600,200 600,350 C600,500 500,650 400,650 C300,650 200,500 200,350 C200,200 300,200 400,150" }}
    animate={{
      d: [
        // Smooth organic variations (no hard edges)
        "M400,150 C500,100 600,200 600,350 C600,500 500,650 400,650 C300,650 200,500 200,350 C200,200 300,200 400,150",
        "M400,160 C450,120 580,220 580,360 C580,480 480,620 400,620 C320,620 220,480 220,360 C220,240 320,180 400,160",
        "M400,140 C520,80 620,180 620,340 C620,520 480,660 400,660 C320,660 180,520 180,340 C180,180 280,140 400,140",
        "M400,170 C470,130 550,250 550,370 C550,490 470,610 400,610 C330,610 250,490 250,370 C250,250 330,190 400,170"
      ],
      opacity: [0.9, 1, 0.95, 1],
      rotate: [0, 2, -1, 0]
    }}
    transition={{
      duration: 20,
      repeat: Infinity,
      repeatType: "reverse",
      ease: "easeInOut",
      times: [0, 0.3, 0.7, 1] // Smooth blending between states
    }}
  />
</motion.svg>